# -*- coding: utf-8 -*-
"""Question3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16D2qF4uj1LdcBhPuZj-6jeLbA9Gw9844
"""

import numpy as np

np.random.seed(42)

# Class 0
mean_0 = [-1, -1]
cov = np.eye(2)
X_0 = np.random.multivariate_normal(mean_0, cov, 10)
y_0 = [0] * 10

# Class 1
mean_1 = [1, 1]
X_1 = np.random.multivariate_normal(mean_1, cov, 10)
y_1 = [1] * 10

# Convert to numpy arrays
y_0 = np.array(y_0).reshape(-1, 1)
y_1 = np.array(y_1).reshape(-1, 1)

# Split 50% for training
X0_train, X0_test = X_0[:5], X_0[5:]
y0_train, y0_test = y_0[:5], y_0[5:]

X1_train, X1_test = X_1[:5], X_1[5:]
y1_train, y1_test = y_1[:5], y_1[5:]

# Combine train and test data
X_train = np.vstack((X0_train, X1_train))
y_train = np.vstack((y0_train, y1_train))

X_test = np.vstack((X0_test, X1_test))
y_test = np.vstack((y0_test, y1_test))

# Shuffle train and test separately
train_indices = np.random.permutation(len(X_train))
test_indices = np.random.permutation(len(X_test))

X_train = X_train[train_indices]
y_train = y_train[train_indices]

X_test = X_test[test_indices]
y_test = y_test[test_indices]

# Confirm shapes
print("X_train:", X_train.shape)
print("y_train:", y_train.reshape(-1))
print("X_test:", X_test.shape)
print("y_test:", y_test.reshape(-1))

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

def sigmoid_derivative(z):
    s = sigmoid(z)
    return s * (1 - s)

# Initialize parameters randomly
w1=np.random.randn()
w2=np.random.randn()
w3=np.random.randn()
b=np.random.randn()


# Hyperparameters
lr = 0.1
epochs = 100000

# Training loop
for epoch in range(epochs):
    for i in range(len(X_train)):
        x1, x2 = X_train[i]
        target = y_train[i][0]

        # Forward pass
        z1 = w1 * x1 + w2 * x2 + b
        h = sigmoid(z1)
        y_pred = w3 * h

        # Compute error
        error = target - y_pred

        # Backward pass (manual gradients)
        dL_dw3 = -2 * error * h

        d = w3 * sigmoid_derivative(z1)
        dL_dw1 = -2 * error * d * x1
        dL_dw2 = -2 * error * d * x2
        dL_db1 = -2 * error * d

        # Update weights
        w3 -= lr * dL_dw3
        w1 -= lr * dL_dw1
        w2 -= lr * dL_dw2
        b -= lr * dL_db1

# Evaluation on test set
mse = 0
for i in range(len(X_test)):
    x1, x2 = X_test[i]
    target = y_test[i][0]

    z1 = w1 * x1 + w2 * x2 + b
    h = sigmoid(z1)
    y_pred = w3 * h
    print(f"original :{target} , y_pred :{y_pred}")
    mse += (target - y_pred) ** 2

mse /= len(X_test)
print("Mean Squared Error on test set:", mse)